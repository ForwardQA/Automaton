buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5"
    }
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'application'
apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/javafx.plugin'

defaultTasks 'clean', 'jar', 'test'

group = 'com.athaydes.automaton'
version = "1.2.0-SNAPSHOT"
description = 'Automaton is a tool for easily automating GUI tests in JavaFX and Swing'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def groovyVersion = '2.3.3'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

//////// hack to make groovy a provided dependency ////////
configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}
////////////////////////////////////////////////////////////

def groovyDeps = [ "org.codehaus.groovy:groovy:${groovyVersion}",
                   "org.codehaus.groovy:groovy-swing:${groovyVersion}",
                   "org.codehaus.groovy:groovy-console:${groovyVersion}",
                   "org.codehaus.groovy:groovy-test:${groovyVersion}" ]

dependencies {
    groovyDeps.each { provided it }
    compile "org.slf4j:slf4j-api:1.7.5"
    compile "org.hamcrest:hamcrest-library:1.3"
    compile "junit:junit:4.11"
    compile "com.google.code.tempus-fugit:tempus-fugit:1.1"
    runtime "org.slf4j:slf4j-log4j12:1.7.5"
    runtime "log4j:log4j:1.2.14"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: 'groovy-all'
    }
    testCompile "cglib:cglib-nodep:2.2.2"
    testCompile "com.athaydes:spock-reports:1.2.4", {
        exclude module: 'groovy-all'
    }
}

compileTestJava.enabled = false

test {
    forkEvery 1 // JavaFX Stage has to be closed to avoid OS Exception in Linux at end of tests
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: " + descriptor )
    }
}

jfxJar.enabled = false

def manifestAttributes = [
        "Implementation-Title"  : "Automaton",
        "Implementation-Version": version,
        "Description"           : description,
        "Main-Class"            : 'com.athaydes.automaton.Automaton',
        "Built-On"              : new java.util.Date(),
        "Premain-Class"         : 'com.athaydes.automaton.cli.AutomatonJavaAgent'
]

jar {
    manifest {
        attributes( manifestAttributes )
    }
}

task uberjar( type: Jar, dependsOn: classes ) {
    classifier = 'all-deps'
    from files( sourceSets.main.output.classesDir )
    from files( sourceSets.main.output.resourcesDir )
    from((configurations.runtime.asFileTree.files + configurations.provided.asFileTree.files)
            .findAll { !it.name.endsWith( 'jfxrt.jar' ) }
            .collect { zipTree( it ) })

    manifest {
        attributes( manifestAttributes )
    }
}

task sourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

/* Publishing config */

publishing {
    publications {
        mavenJava( MavenPublication ) {
            from components.java
            artifact sourcesJar
            artifact uberjar
        }
    }
}

apply plugin: 'com.jfrog.bintray'

bintray {
    user = project.hasProperty( "bintrayUserName" ) ? bintrayUserName : null
    key = project.hasProperty( "bintrayApiKey" ) ? bintrayApiKey : null
    publications = [ "mavenJava" ]
    publish = true
    pkg {
        repo = 'maven'
        name = 'automaton'
        licenses = [ 'Apache-2.0' ]
        desc = 'Automaton: easy tests for Swing and JavaFX applications'
        websiteUrl = 'https://github.com/renatoathaydes/Automaton'
        issueTrackerUrl = 'https://github.com/renatoathaydes/Automaton/issues'
        labels = [ 'groovy', 'swing', 'javafx', 'testing', 'automation' ]
        publicDownloadNumbers = true
    }
}

bintrayUpload.dependsOn build, sourcesJar, uberjar
